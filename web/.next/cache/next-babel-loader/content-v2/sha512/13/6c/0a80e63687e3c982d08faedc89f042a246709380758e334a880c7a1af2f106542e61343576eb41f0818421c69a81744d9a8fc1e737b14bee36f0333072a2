{"ast":null,"code":"import { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  providers: [Providers.GitHub({\n    clientId: process.env.GIT_HUB_CLIENTE_ID,\n    clientSecret: process.env.GIT_HUB_SECRET,\n    scope: 'read:user'\n  })],\n  //    jwt: {\n  //        signingKey: process.env.SIGNING_KEY,\n  //    },\n  callbacks: {\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n\n      try {\n        await fauna.query(q.If(q.Not(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))), q.Create(q.Collection('users'), {\n          data: {\n            email\n          }\n        }), q.Get(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))));\n        return true;\n      } catch {\n        return false;\n      }\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/rodrigomonteiro/Documents/Developer/Ignite/reactjs/ignews/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","process","env","GIT_HUB_CLIENTE_ID","clientSecret","GIT_HUB_SECRET","scope","callbacks","signIn","user","account","profile","email","If","Not","Exists","Match","Index","Casefold","Create","Collection","data","Get"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAGA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AAEpBG,EAAAA,SAAS,EAAE,CACPF,SAAS,CAACG,MAAV,CAAiB;AACbC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADT;AAEbC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,cAFb;AAGbC,IAAAA,KAAK,EAAE;AAHM,GAAjB,CADO,CAFS;AASxB;AACA;AACA;AACIC,EAAAA,SAAS,EAAE;AACP,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAoC;AAEhC,YAAM;AAAEC,QAAAA;AAAF,UAAYH,IAAlB;;AACA,UAAI;AAEA,cAAMZ,KAAK,CAACJ,KAAN,CAEFC,CAAC,CAACmB,EAAF,CACInB,CAAC,CAACoB,GAAF,CACIpB,CAAC,CAACqB,MAAF,CACIrB,CAAC,CAACsB,KAAF,CACItB,CAAC,CAACuB,KAAF,CAAQ,eAAR,CADJ,EAEIvB,CAAC,CAACwB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFJ,CADJ,CADJ,CADJ,EASIlB,CAAC,CAACyB,MAAF,CACIzB,CAAC,CAAC0B,UAAF,CAAa,OAAb,CADJ,EAEI;AAAEC,UAAAA,IAAI,EAAE;AAAET,YAAAA;AAAF;AAAR,SAFJ,CATJ,EAaIlB,CAAC,CAAC4B,GAAF,CACI5B,CAAC,CAACsB,KAAF,CACItB,CAAC,CAACuB,KAAF,CAAQ,eAAR,CADJ,EAEIvB,CAAC,CAACwB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFJ,CADJ,CAbJ,CAFE,CAAN;AAuBA,eAAO,IAAP;AAEH,OA3BD,CA2BC,MAAK;AACF,eAAO,KAAP;AACH;AAEJ;;AAnCM;AAZS,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb';\n\n\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\n\nimport { fauna } from '../../../services/fauna';\n\nexport default NextAuth({ \n\n    providers: [\n        Providers.GitHub({\n            clientId: process.env.GIT_HUB_CLIENTE_ID,\n            clientSecret: process.env.GIT_HUB_SECRET,\n            scope: 'read:user'\n        })\n    ],\n//    jwt: {\n//        signingKey: process.env.SIGNING_KEY,\n//    },\n    callbacks: {\n        async signIn(user, account, profile){\n\n            const { email } = user;   \n            try {\n\n                await fauna.query(\n\n                    q.If(\n                        q.Not(\n                            q.Exists(\n                                q.Match(\n                                    q.Index('user_by_email'),\n                                    q.Casefold(user.email)\n                                )\n                            )\n                        ),\n                        q.Create(\n                            q.Collection('users'),\n                            { data: { email}}\n                        ),\n                        q.Get(\n                            q.Match(\n                                q.Index('user_by_email'),\n                                q.Casefold(user.email)\n                            )\n                        ),\n                    )    \n                )\n                return true;            \n\n            }catch{\n                return false;\n            }\n\n        }\n\n    }\n})"]},"metadata":{},"sourceType":"module"}